# coding: utf-8

"""
    Timmi Absences API

    Welcome on the documentation for Timmi Absences API.

    The version of the OpenAPI document: 1.0
    Contact: developers@lucca.fr
    Created by: https://www.lucca.fr
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lucca_timmi_absences_python_sdk import schemas  # noqa: F401


class Leave(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Absences from work, wether they are planned or not, are described in Lucca using three concepts : **LeaveRequests**, **LeavePeriods** and **Leaves**.

A **LeaveRequest** represent the request made by employees when planning time off. This resource is used for workflow purposes.

A **LeavePeriod** is the continuous period of absence requested by the employee or entered by HR. It is linked to a **LeaveRequest** if workflow applies.

A **Leave** is the subdivision of a **LeavePeriod**. There is one **Leave** per half-day of the **LeavePeriod**. Each **Leave** is linked to a **LeaveAccount**, which represent the type of leave (PTO, Sick Leave, Congés payés, RTT, etc).

![Timmi Absences - UML](https://stoplight.io/api/v1/projects/cHJqOjEwNjgxNg/images/6yaK9GNTQ08)

There can only be one **Leave** per half-day. This prevents duplicates.
For **Leaves** expressed in hours (as opposed to **Leaves** in days), the duration of the **Leave** is stored in the value field of the **Leave**. The previous constraint implies that there can only be one type of **Leave** per half-day. This issue is solved in the next version of the API.

## Fields
    """


    class MetaOapg:
        required = {
            "date",
            "leaveAccountId",
            "leavePeriodId",
            "isAm",
            "id",
        }
        
        class properties:
            id = schemas.StrSchema
            date = schemas.DateSchema
            isAm = schemas.BoolSchema
            leaveAccountId = schemas.IntSchema
            leavePeriodId = schemas.IntSchema
        
            @staticmethod
            def leaveAccount() -> typing.Type['LeaveAccount']:
                return LeaveAccount
        
            @staticmethod
            def leavePeriod() -> typing.Type['LeavePeriod']:
                return LeavePeriod
            
            
            class value(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'duration'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'value':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            creationDate = schemas.DateTimeSchema
            isActive = schemas.BoolSchema
            
            
            class cancellationDate(
                schemas.DateTimeBase,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'cancellationDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            cancellationUserId = schemas.AnyTypeSchema
            comment = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "date": date,
                "isAm": isAm,
                "leaveAccountId": leaveAccountId,
                "leavePeriodId": leavePeriodId,
                "leaveAccount": leaveAccount,
                "leavePeriod": leavePeriod,
                "value": value,
                "creationDate": creationDate,
                "isActive": isActive,
                "cancellationDate": cancellationDate,
                "cancellationUserId": cancellationUserId,
                "comment": comment,
            }
    
    date: MetaOapg.properties.date
    leaveAccountId: MetaOapg.properties.leaveAccountId
    leavePeriodId: MetaOapg.properties.leavePeriodId
    isAm: MetaOapg.properties.isAm
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isAm"]) -> MetaOapg.properties.isAm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leaveAccountId"]) -> MetaOapg.properties.leaveAccountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leavePeriodId"]) -> MetaOapg.properties.leavePeriodId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leaveAccount"]) -> 'LeaveAccount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leavePeriod"]) -> 'LeavePeriod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationDate"]) -> MetaOapg.properties.creationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isActive"]) -> MetaOapg.properties.isActive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cancellationDate"]) -> MetaOapg.properties.cancellationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cancellationUserId"]) -> MetaOapg.properties.cancellationUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "date", "isAm", "leaveAccountId", "leavePeriodId", "leaveAccount", "leavePeriod", "value", "creationDate", "isActive", "cancellationDate", "cancellationUserId", "comment", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isAm"]) -> MetaOapg.properties.isAm: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leaveAccountId"]) -> MetaOapg.properties.leaveAccountId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leavePeriodId"]) -> MetaOapg.properties.leavePeriodId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leaveAccount"]) -> typing.Union['LeaveAccount', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leavePeriod"]) -> typing.Union['LeavePeriod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationDate"]) -> typing.Union[MetaOapg.properties.creationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isActive"]) -> typing.Union[MetaOapg.properties.isActive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cancellationDate"]) -> typing.Union[MetaOapg.properties.cancellationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cancellationUserId"]) -> typing.Union[MetaOapg.properties.cancellationUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "date", "isAm", "leaveAccountId", "leavePeriodId", "leaveAccount", "leavePeriod", "value", "creationDate", "isActive", "cancellationDate", "cancellationUserId", "comment", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, str, date, ],
        leaveAccountId: typing.Union[MetaOapg.properties.leaveAccountId, decimal.Decimal, int, ],
        leavePeriodId: typing.Union[MetaOapg.properties.leavePeriodId, decimal.Decimal, int, ],
        isAm: typing.Union[MetaOapg.properties.isAm, bool, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        leaveAccount: typing.Union['LeaveAccount', schemas.Unset] = schemas.unset,
        leavePeriod: typing.Union['LeavePeriod', schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        creationDate: typing.Union[MetaOapg.properties.creationDate, str, datetime, schemas.Unset] = schemas.unset,
        isActive: typing.Union[MetaOapg.properties.isActive, bool, schemas.Unset] = schemas.unset,
        cancellationDate: typing.Union[MetaOapg.properties.cancellationDate, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        cancellationUserId: typing.Union[MetaOapg.properties.cancellationUserId, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Leave':
        return super().__new__(
            cls,
            *args,
            date=date,
            leaveAccountId=leaveAccountId,
            leavePeriodId=leavePeriodId,
            isAm=isAm,
            id=id,
            leaveAccount=leaveAccount,
            leavePeriod=leavePeriod,
            value=value,
            creationDate=creationDate,
            isActive=isActive,
            cancellationDate=cancellationDate,
            cancellationUserId=cancellationUserId,
            comment=comment,
            _configuration=_configuration,
            **kwargs,
        )

from lucca_timmi_absences_python_sdk.model.leave_account import LeaveAccount
from lucca_timmi_absences_python_sdk.model.leave_period import LeavePeriod
