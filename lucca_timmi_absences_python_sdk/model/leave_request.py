# coding: utf-8

"""
    Timmi Absences API

    Welcome on the documentation for Timmi Absences API.

    The version of the OpenAPI document: 1.0
    Contact: developers@lucca.fr
    Created by: https://www.lucca.fr
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lucca_timmi_absences_python_sdk import schemas  # noqa: F401


class LeaveRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Absences from work, wether they are planned or not, are described in Lucca using three concepts : **LeaveRequests**, **LeavePeriods** and **Leaves**.

A **LeaveRequest** represent the request made by employees when planning time off. This resource is used for workflow purposes.

A **LeavePeriod** is the continuous period of absence requested by the employee or entered by HR. It is linked to a **LeaveRequest** if workflow applies.

A **Leave** is the subdivision of a **LeavePeriod**. There is one **Leave** per half-day of the **LeavePeriod**. Each **Leave** is linked to a **LeaveAccount**, which represent the type of leave (PTO, Sick Leave, Congés payés, RTT, etc).

![Timmi Absences - UML](../assets/images/ROunRiCm34LtdeB8M206UeCucG9qABfq9aIs5Y9BBKNPGv6xrrOSH4CcKG-F_F-GZTJA621VVFmXfH5Te9pn3n2Fv2xVcahaKmf9yNFm9YjFog8tTWoBjB1UDSqjkZOd1ueygpUJYAP5OF0iwBow80XmItmJckH3VejaWpK-hE1Tr2S-y_BFHbRoCdHT1zTsRRFgLfgZQFLzFgNuvNKKVhfKTIQJwlRZFR9tBfLePtxIOQ9G.png)

**LeaveRequests** status are by default in the `pending_approval` state. **LeaveRequests** status can be `approved`, `denied`, `cancelled` or in the `cancellation_pending` state.

## Fields
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            leavePeriodId = schemas.IntSchema
        
            @staticmethod
            def leavePeriod() -> typing.Type['LeavePeriod']:
                return LeavePeriod
            
            
            class status(
                schemas.EnumBase,
                schemas.NumberSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        0: "POSITIVE_0",
                        2: "POSITIVE_2",
                        3: "POSITIVE_3",
                        4: "POSITIVE_4",
                        5: "POSITIVE_5",
                    }
                
                @schemas.classproperty
                def POSITIVE_0(cls):
                    return cls(0)
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls(2)
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls(3)
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls(4)
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls(5)
            creationDate = schemas.DateTimeSchema
            nextApproverId = schemas.AnyTypeSchema
            cancellationUserId = schemas.AnyTypeSchema
            
            
            class cancellationDate(
                schemas.DateTimeBase,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'cancellationDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            isActive = schemas.BoolSchema
            
            
            class approvals(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LeaveRequestApproval']:
                        return LeaveRequestApproval
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['LeaveRequestApproval'], typing.List['LeaveRequestApproval']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approvals':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LeaveRequestApproval':
                    return super().__getitem__(i)
            
            
            class cancellationRequests(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CancellationRequest']:
                        return CancellationRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CancellationRequest'], typing.List['CancellationRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cancellationRequests':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CancellationRequest':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "leavePeriodId": leavePeriodId,
                "leavePeriod": leavePeriod,
                "status": status,
                "creationDate": creationDate,
                "nextApproverId": nextApproverId,
                "cancellationUserId": cancellationUserId,
                "cancellationDate": cancellationDate,
                "isActive": isActive,
                "approvals": approvals,
                "cancellationRequests": cancellationRequests,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leavePeriodId"]) -> MetaOapg.properties.leavePeriodId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leavePeriod"]) -> 'LeavePeriod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationDate"]) -> MetaOapg.properties.creationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextApproverId"]) -> MetaOapg.properties.nextApproverId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cancellationUserId"]) -> MetaOapg.properties.cancellationUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cancellationDate"]) -> MetaOapg.properties.cancellationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isActive"]) -> MetaOapg.properties.isActive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvals"]) -> MetaOapg.properties.approvals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cancellationRequests"]) -> MetaOapg.properties.cancellationRequests: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "leavePeriodId", "leavePeriod", "status", "creationDate", "nextApproverId", "cancellationUserId", "cancellationDate", "isActive", "approvals", "cancellationRequests", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leavePeriodId"]) -> typing.Union[MetaOapg.properties.leavePeriodId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leavePeriod"]) -> typing.Union['LeavePeriod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationDate"]) -> typing.Union[MetaOapg.properties.creationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextApproverId"]) -> typing.Union[MetaOapg.properties.nextApproverId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cancellationUserId"]) -> typing.Union[MetaOapg.properties.cancellationUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cancellationDate"]) -> typing.Union[MetaOapg.properties.cancellationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isActive"]) -> typing.Union[MetaOapg.properties.isActive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvals"]) -> typing.Union[MetaOapg.properties.approvals, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cancellationRequests"]) -> typing.Union[MetaOapg.properties.cancellationRequests, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "leavePeriodId", "leavePeriod", "status", "creationDate", "nextApproverId", "cancellationUserId", "cancellationDate", "isActive", "approvals", "cancellationRequests", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        leavePeriodId: typing.Union[MetaOapg.properties.leavePeriodId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        leavePeriod: typing.Union['LeavePeriod', schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        creationDate: typing.Union[MetaOapg.properties.creationDate, str, datetime, schemas.Unset] = schemas.unset,
        nextApproverId: typing.Union[MetaOapg.properties.nextApproverId, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        cancellationUserId: typing.Union[MetaOapg.properties.cancellationUserId, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        cancellationDate: typing.Union[MetaOapg.properties.cancellationDate, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        isActive: typing.Union[MetaOapg.properties.isActive, bool, schemas.Unset] = schemas.unset,
        approvals: typing.Union[MetaOapg.properties.approvals, list, tuple, schemas.Unset] = schemas.unset,
        cancellationRequests: typing.Union[MetaOapg.properties.cancellationRequests, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LeaveRequest':
        return super().__new__(
            cls,
            *args,
            id=id,
            leavePeriodId=leavePeriodId,
            leavePeriod=leavePeriod,
            status=status,
            creationDate=creationDate,
            nextApproverId=nextApproverId,
            cancellationUserId=cancellationUserId,
            cancellationDate=cancellationDate,
            isActive=isActive,
            approvals=approvals,
            cancellationRequests=cancellationRequests,
            _configuration=_configuration,
            **kwargs,
        )

from lucca_timmi_absences_python_sdk.model.cancellation_request import CancellationRequest
from lucca_timmi_absences_python_sdk.model.leave_period import LeavePeriod
from lucca_timmi_absences_python_sdk.model.leave_request_approval import LeaveRequestApproval
