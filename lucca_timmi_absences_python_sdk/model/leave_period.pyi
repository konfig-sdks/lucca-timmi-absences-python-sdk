# coding: utf-8

"""
    Timmi Absences API

    Welcome on the documentation for Timmi Absences API.

    The version of the OpenAPI document: 1.0
    Contact: developers@lucca.fr
    Created by: https://www.lucca.fr
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lucca_timmi_absences_python_sdk import schemas  # noqa: F401


class LeavePeriod(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Absences from work, wether they are planned or not, are described in Lucca using three concepts : **LeaveRequests**, **LeavePeriods** and **Leaves**.

A **LeaveRequest** represent the request made by employees when planning time off. This resource is used for workflow purposes.

A **LeavePeriod** is the continuous period of absence requested by the employee or entered by HR. It is linked to a **LeaveRequest** if workflow applies.

A **Leave** is the subdivision of a **LeavePeriod**. There is one **Leave** per half-day of the **LeavePeriod**. Each **Leave** is linked to a **LeaveAccount**, which represent the type of leave (PTO, Sick Leave, Congés payés, RTT, etc).
 
![Timmi Absences - UML](../assets/images/ROunRiCm34LtdeB8M206UeCucG9qABfq9aIs5Y9BBKNPGv6xrrOSH4CcKG-F_F-GZTJA621VVFmXfH5Te9pn3n2Fv2xVcahaKmf9yNFm9YjFog8tTWoBjB1UDSqjkZOd1ueygpUJYAP5OF0iwBow80XmItmJckH3VejaWpK-hE1Tr2S-y_BFHbRoCdHT1zTsRRFgLfgZQFLzFgNuvNKKVhfKTIQJwlRZFR9tBfLePtxIOQ9G.png)

## Fields
    """


    class MetaOapg:
        
        class properties:
            id = schemas.NumberSchema
            ownerId = schemas.NumberSchema
            isConfirmed = schemas.BoolSchema
            
            
            class confirmationDate(
                schemas.DateTimeBase,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'confirmationDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            attachmentId = schemas.AnyTypeSchema
            
            
            class leaves(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Leave']:
                        return Leave
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Leave'], typing.List['Leave']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'leaves':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Leave':
                    return super().__getitem__(i)
            
            
            class logs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LeavePeriodLog']:
                        return LeavePeriodLog
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['LeavePeriodLog'], typing.List['LeavePeriodLog']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'logs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LeavePeriodLog':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "ownerId": ownerId,
                "isConfirmed": isConfirmed,
                "confirmationDate": confirmationDate,
                "attachmentId": attachmentId,
                "leaves": leaves,
                "logs": logs,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownerId"]) -> MetaOapg.properties.ownerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isConfirmed"]) -> MetaOapg.properties.isConfirmed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confirmationDate"]) -> MetaOapg.properties.confirmationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachmentId"]) -> MetaOapg.properties.attachmentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leaves"]) -> MetaOapg.properties.leaves: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logs"]) -> MetaOapg.properties.logs: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "ownerId", "isConfirmed", "confirmationDate", "attachmentId", "leaves", "logs", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownerId"]) -> typing.Union[MetaOapg.properties.ownerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isConfirmed"]) -> typing.Union[MetaOapg.properties.isConfirmed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confirmationDate"]) -> typing.Union[MetaOapg.properties.confirmationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachmentId"]) -> typing.Union[MetaOapg.properties.attachmentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leaves"]) -> typing.Union[MetaOapg.properties.leaves, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logs"]) -> typing.Union[MetaOapg.properties.logs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "ownerId", "isConfirmed", "confirmationDate", "attachmentId", "leaves", "logs", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ownerId: typing.Union[MetaOapg.properties.ownerId, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        isConfirmed: typing.Union[MetaOapg.properties.isConfirmed, bool, schemas.Unset] = schemas.unset,
        confirmationDate: typing.Union[MetaOapg.properties.confirmationDate, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        attachmentId: typing.Union[MetaOapg.properties.attachmentId, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        leaves: typing.Union[MetaOapg.properties.leaves, list, tuple, schemas.Unset] = schemas.unset,
        logs: typing.Union[MetaOapg.properties.logs, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LeavePeriod':
        return super().__new__(
            cls,
            *args,
            id=id,
            ownerId=ownerId,
            isConfirmed=isConfirmed,
            confirmationDate=confirmationDate,
            attachmentId=attachmentId,
            leaves=leaves,
            logs=logs,
            _configuration=_configuration,
            **kwargs,
        )

from lucca_timmi_absences_python_sdk.model.leave import Leave
from lucca_timmi_absences_python_sdk.model.leave_period_log import LeavePeriodLog
