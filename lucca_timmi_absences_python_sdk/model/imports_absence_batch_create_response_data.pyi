# coding: utf-8

"""
    Timmi Absences API

    Welcome on the documentation for Timmi Absences API.

    The version of the OpenAPI document: 1.0
    Contact: developers@lucca.fr
    Created by: https://www.lucca.fr
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lucca_timmi_absences_python_sdk import schemas  # noqa: F401


class ImportsAbsenceBatchCreateResponseData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
        
            @staticmethod
            def report() -> typing.Type['ImportsAbsenceBatchCreateResponseDataReport']:
                return ImportsAbsenceBatchCreateResponseDataReport
            generatedAt = schemas.DateTimeSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.IntSchema
            ):
                
                @schemas.classproperty
                def POSITIVE_0(cls):
                    return cls(0)
                
                @schemas.classproperty
                def POSITIVE_10(cls):
                    return cls(10)
                
                @schemas.classproperty
                def POSITIVE_20(cls):
                    return cls(20)
                
                @schemas.classproperty
                def POSITIVE_100(cls):
                    return cls(100)
            lineTotal = schemas.IntSchema
            testErrorTotal = schemas.IntSchema
            totalStep = schemas.IntSchema
            expectedCreationTotal = schemas.IntSchema
            expectedUpdateTotal = schemas.IntSchema
            testNonBlockingErrorTotal = schemas.IntSchema
            currentStep = schemas.IntSchema
            creationTotal = schemas.IntSchema
            updateTotal = schemas.IntSchema
            importErrorTotal = schemas.IntSchema
            __annotations__ = {
                "id": id,
                "report": report,
                "generatedAt": generatedAt,
                "status": status,
                "lineTotal": lineTotal,
                "testErrorTotal": testErrorTotal,
                "totalStep": totalStep,
                "expectedCreationTotal": expectedCreationTotal,
                "expectedUpdateTotal": expectedUpdateTotal,
                "testNonBlockingErrorTotal": testNonBlockingErrorTotal,
                "currentStep": currentStep,
                "creationTotal": creationTotal,
                "updateTotal": updateTotal,
                "importErrorTotal": importErrorTotal,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["report"]) -> 'ImportsAbsenceBatchCreateResponseDataReport': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["generatedAt"]) -> MetaOapg.properties.generatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lineTotal"]) -> MetaOapg.properties.lineTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testErrorTotal"]) -> MetaOapg.properties.testErrorTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalStep"]) -> MetaOapg.properties.totalStep: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expectedCreationTotal"]) -> MetaOapg.properties.expectedCreationTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expectedUpdateTotal"]) -> MetaOapg.properties.expectedUpdateTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testNonBlockingErrorTotal"]) -> MetaOapg.properties.testNonBlockingErrorTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentStep"]) -> MetaOapg.properties.currentStep: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationTotal"]) -> MetaOapg.properties.creationTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateTotal"]) -> MetaOapg.properties.updateTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importErrorTotal"]) -> MetaOapg.properties.importErrorTotal: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "report", "generatedAt", "status", "lineTotal", "testErrorTotal", "totalStep", "expectedCreationTotal", "expectedUpdateTotal", "testNonBlockingErrorTotal", "currentStep", "creationTotal", "updateTotal", "importErrorTotal", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["report"]) -> typing.Union['ImportsAbsenceBatchCreateResponseDataReport', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["generatedAt"]) -> typing.Union[MetaOapg.properties.generatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lineTotal"]) -> typing.Union[MetaOapg.properties.lineTotal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testErrorTotal"]) -> typing.Union[MetaOapg.properties.testErrorTotal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalStep"]) -> typing.Union[MetaOapg.properties.totalStep, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expectedCreationTotal"]) -> typing.Union[MetaOapg.properties.expectedCreationTotal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expectedUpdateTotal"]) -> typing.Union[MetaOapg.properties.expectedUpdateTotal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testNonBlockingErrorTotal"]) -> typing.Union[MetaOapg.properties.testNonBlockingErrorTotal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentStep"]) -> typing.Union[MetaOapg.properties.currentStep, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationTotal"]) -> typing.Union[MetaOapg.properties.creationTotal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateTotal"]) -> typing.Union[MetaOapg.properties.updateTotal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importErrorTotal"]) -> typing.Union[MetaOapg.properties.importErrorTotal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "report", "generatedAt", "status", "lineTotal", "testErrorTotal", "totalStep", "expectedCreationTotal", "expectedUpdateTotal", "testNonBlockingErrorTotal", "currentStep", "creationTotal", "updateTotal", "importErrorTotal", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        report: typing.Union['ImportsAbsenceBatchCreateResponseDataReport', schemas.Unset] = schemas.unset,
        generatedAt: typing.Union[MetaOapg.properties.generatedAt, str, datetime, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lineTotal: typing.Union[MetaOapg.properties.lineTotal, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        testErrorTotal: typing.Union[MetaOapg.properties.testErrorTotal, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        totalStep: typing.Union[MetaOapg.properties.totalStep, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        expectedCreationTotal: typing.Union[MetaOapg.properties.expectedCreationTotal, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        expectedUpdateTotal: typing.Union[MetaOapg.properties.expectedUpdateTotal, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        testNonBlockingErrorTotal: typing.Union[MetaOapg.properties.testNonBlockingErrorTotal, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        currentStep: typing.Union[MetaOapg.properties.currentStep, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        creationTotal: typing.Union[MetaOapg.properties.creationTotal, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        updateTotal: typing.Union[MetaOapg.properties.updateTotal, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        importErrorTotal: typing.Union[MetaOapg.properties.importErrorTotal, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ImportsAbsenceBatchCreateResponseData':
        return super().__new__(
            cls,
            *args,
            id=id,
            report=report,
            generatedAt=generatedAt,
            status=status,
            lineTotal=lineTotal,
            testErrorTotal=testErrorTotal,
            totalStep=totalStep,
            expectedCreationTotal=expectedCreationTotal,
            expectedUpdateTotal=expectedUpdateTotal,
            testNonBlockingErrorTotal=testNonBlockingErrorTotal,
            currentStep=currentStep,
            creationTotal=creationTotal,
            updateTotal=updateTotal,
            importErrorTotal=importErrorTotal,
            _configuration=_configuration,
            **kwargs,
        )

from lucca_timmi_absences_python_sdk.model.imports_absence_batch_create_response_data_report import ImportsAbsenceBatchCreateResponseDataReport
