# coding: utf-8

"""
    Timmi Absences API

    Welcome on the documentation for Timmi Absences API.

    The version of the OpenAPI document: 1.0
    Contact: developers@lucca.fr
    Created by: https://www.lucca.fr
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lucca_timmi_absences_python_sdk import schemas  # noqa: F401


class ImportsCreateAbsencesBatchResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            summaryId = schemas.UUIDSchema
            hasError = schemas.BoolSchema
            __annotations__ = {
                "summaryId": summaryId,
                "hasError": hasError,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summaryId"]) -> MetaOapg.properties.summaryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasError"]) -> MetaOapg.properties.hasError: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["summaryId", "hasError", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summaryId"]) -> typing.Union[MetaOapg.properties.summaryId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasError"]) -> typing.Union[MetaOapg.properties.hasError, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["summaryId", "hasError", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        summaryId: typing.Union[MetaOapg.properties.summaryId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        hasError: typing.Union[MetaOapg.properties.hasError, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ImportsCreateAbsencesBatchResponse':
        return super().__new__(
            cls,
            *args,
            summaryId=summaryId,
            hasError=hasError,
            _configuration=_configuration,
            **kwargs,
        )
